<% val dxPathConfig: dx.core.io.DxWorkerPaths %>
<% val rtTraceLevel: Int %>
<% val streamAllFiles: Boolean %>
<% val bashDollar: String = "$" %>
    # evaluate input arguments, and download input files
    java -jar ${bashDollar}{DX_FS_ROOT}/dxWDL.jar internal taskProlog ${bashDollar}{HOME} -traceLevel ${rtTraceLevel} ${if streamAllFiles "-streamAllFiles" else ""}

    echo "Using dxda version: ${bashDollar}(dx-download-agent version)"
    echo "Using dxfuse version: ${bashDollar}(dxfuse -version)"

    # run the dx-download-agent (dxda) on a manifest of files
    if [[ -e ${dxPathConfig.dxdaManifest} ]]; then
       head -n 20 ${dxPathConfig.dxdaManifest}
       bzip2 ${dxPathConfig.dxdaManifest}

       # run the download agent, and store the return code; do not exit on error.
       # we need to run it from the root directory, because it uses relative paths.
       cd /
       rc=0
       dx-download-agent download ${dxPathConfig.dxdaManifest}.bz2 || rc=${bashDollar}? && true

       # if there was an error during download, print out the download log
       if [[ ${bashDollar}rc != 0 ]]; then
           echo "download agent failed rc=${bashDollar}rc"
           if [[ -e ${dxPathConfig.dxdaManifest}.bz2.download.log ]]; then
              echo "The download log is:"
              cat ${dxPathConfig.dxdaManifest}.bz2.download.log
           fi
           exit ${bashDollar}rc
       fi

       # The download was ok, check file integrity on disk
       dx-download-agent inspect ${dxPathConfig.dxdaManifest.toString}.bz2

       # go back to home directory
       cd ${dxPathConfig.homeDir.toString}
    fi

    # run dxfuse on a manifest of files. It will provide remote access
    # to DNAx files.
    if [[ -e ${dxPathConfig.dxfuseManifest} ]]; then
       head -n 20 ${dxPathConfig.dxfuseManifest.toString}

       # make sure the mountpoint exists
       mkdir -p ${dxPathConfig.dxfuseMountpoint.toString}

       # don't leak the token to stdout. We need the DNAx token to be accessible
       # in the environment, so that dxfuse could get it.
       source environment >& /dev/null

       dxfuse_version=${bashDollar}(dxfuse -version)
       echo "dxfuse version ${bashDollar}{dxfuse_version}"

       # run dxfuse so that it will not exit after the bash script exists.
       echo "mounting dxfuse on ${dxPathConfig.dxfuseMountpoint.toString}"
       dxfuse_log=/root/.dxfuse/dxfuse.log

       dxfuse -readOnly ${dxPathConfig.dxfuseMountpoint.toString} ${dxPathConfig.dxfuseManifest.toString}
       dxfuse_err_code=${bashDollar}?
       if [[ ${bashDollar}dxfuse_err_code != 0 ]]; then
           echo "error starting dxfuse, rc=${bashDollar}dxfuse_err_code"
           if [[ -f ${bashDollar}dxfuse_log ]]; then
               cat ${bashDollar}dxfuse_log
           fi
           exit 1
       fi

       # do we really need this?
       sleep 1
       cat ${bashDollar}dxfuse_log
       echo ""
       ls -Rl ${dxPathConfig.dxfuseMountpoint.toString}
    fi

    # construct the bash command and write it to a file
    java -jar ${bashDollar}{DX_FS_ROOT}/dxWDL.jar internal taskInstantiateCommand ${bashDollar}{HOME} -traceLevel ${rtTraceLevel} ${if streamAllFiles "-streamAllFiles" else ""}

    echo "bash command encapsulation script:"
    cat ${dxPathConfig.script.toString}

    # Run the shell script generated by the prolog.
    # Capture the stderr/stdout in files
    if [[ -e ${dxPathConfig.dockerSubmitScript.toString} ]]; then
        echo "docker submit script:"
        cat ${dxPathConfig.dockerSubmitScript.toString}
        ${dxPathConfig.dockerSubmitScript.toString}
    else
        whoami
        /bin/bash ${dxPathConfig.script.toString}
    fi

    #  check return code of the script
    rc=`cat ${dxPathConfig.rcPath}`
    if [[ ${bashDollar}rc != 0 ]]; then
        if [[ -f ${bashDollar}dxfuse_log ]]; then
            echo "=== dxfuse filesystem log === "
            cat ${bashDollar}dxfuse_log
        fi
        exit ${bashDollar}rc
    fi

    # evaluate applet outputs, and upload result files
    java -jar ${bashDollar}{DX_FS_ROOT}/dxWDL.jar internal taskEpilog ${bashDollar}{HOME} -traceLevel ${rtTraceLevel} ${if streamAllFiles "-streamAllFiles" else ""}

    # unmount dxfuse
    if [[ -e ${dxPathConfig.dxfuseManifest} ]]; then
        echo "unmounting dxfuse"
        sudo umount ${dxPathConfig.dxfuseMountpoint}
    fi