package dx.compiler

import java.nio.file.{Files, Path}

import dx.api.{DxApi, DxApp, DxApplet, DxFindApps, DxFindDataObjects, DxPath, DxProject}
import dx.core.getVersion
import wdlTools.util.Util

abstract class DxNativeInterface(dxApi: DxApi) {
  def getApplet(dxProject: DxProject, path: String): DxApplet = {
    path match {
      case id if id.startsWith("applet-") => dxApi.applet(id)
      case _ =>
        val fullPath = s"${DxPath.DX_URL_PREFIX}/${path}"
        dxApi.resolveOnePath(fullPath, Some(dxProject)) match {
          case applet: DxApplet => applet
          case _                => throw new Exception(s"DxNI only supports apps and applets")
        }
    }
  }

  private def searchApplets(dxProject: DxProject,
                            folder: String,
                            recursive: Boolean): Vector[DxApplet] = {
    val applets: Vector[DxApplet] =
      DxFindDataObjects(dxApi)
        .apply(Some(dxProject),
               Some(folder),
               recursive,
               classRestriction = Some("applet"),
               withInputOutputSpec = true)
        .keySet
        .collect {
          case applet: DxApplet if applet.describe().properties.exists(_.contains(CHECKSUM_PROP)) =>
            applet
        }
        .toVector
    if (applets.isEmpty) {
      dxApi.logger.trace(s"Found no applets in project ${dxProject.id}/${folder}")
    }
    applets
  }

  private def searchApps: Vector[DxApp] = {
    val apps: Vector[DxApp] = DxFindApps(dxApi)
      .apply(published = Some(true), withInputOutputSpec = true)
    if (apps.isEmpty) {
      dxApi.logger.warning(s"Found no DX global apps")
    }
    apps
  }
  def writeToFile(doc: String, outputPath: Path, force: Boolean): Unit = {
    if (Files.exists(outputPath)) {
      if (!force) {
        throw new Exception(
            s"""|Output file ${outputPath.toString} already exists,
                |use -force to overwrite it""".stripMargin
              .replaceAll("\n", " ")
        )
      }
      outputPath.toFile.delete
    }
    Util.writeFileContent(outputPath, doc)
  }

  def generateApplets(apps: Vector[DxApplet], headerLines: Vector[String]): String

  def applyApplets(dxProject: DxProject,
                   folderOrPath: Either[String, String],
                   output: Path,
                   recursive: Boolean,
                   force: Boolean): Unit = {
    val applets: Vector[DxApplet] = folderOrPath match {
      case Left(folder) => searchApplets(dxProject, folder, recursive)
      case Right(path)  => Vector(getApplet(dxProject, path))
    }
    if (applets.nonEmpty) {
      // add comment describing how the file was created
      val headerLines = Vector(
          s"This file was generated by the Dx Native Interface (DxNI) tool ${getVersion}.",
          s"project name = ${dxProject.describe().name}",
          s"project ID = ${dxProject.getId}",
          s"folder = ${folderOrPath.merge}"
      )
      val doc = generateApplets(applets, headerLines)
      writeToFile(doc, output, force)
    }
  }

  def generateApps(apps: Vector[DxApp], headerLines: Vector[String]): String

  def applyApps(output: Path, force: Boolean): Unit = {
    val apps = searchApps
    if (apps.nonEmpty) {
      // add comment describing how the file was created
      val headerLines = Vector(
          s"This file was generated by the Dx Native Interface (DxNI) tool ${getVersion}.",
          "These are interfaces to apps."
      )
      val doc = generateApps(apps, headerLines)
      writeToFile(doc, output, force)
    }
  }
}
