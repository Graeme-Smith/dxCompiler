name: dxCompiler Release (Staging and Prod)
on:
  workflow_dispatch:
    inputs:
      release-version:
        description: 'Release version'
        required: true
      should-run-tests:
        description: 'Should run large integration tests (false/true; default: false)'
        required: false
        default: 'false'

jobs:
  run-release:
    name: dxCompiler Release (Staging and Prod)
    runs-on: ubuntu-18.04
    steps:
      - name: Git checkout
        uses: actions/checkout@v2

      - name: Install java
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Install dxpy and other dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https wget git openssh-server tree python3 python3-pip python3-venv
          pip3 install setuptools wheel
          pip3 install termcolor
          pip3 install dxpy

      - name: Run tests
        if: ${{ github.event.inputs.should-run-tests == 'true' }} 
        env:
          AUTH_TOKEN: ${{ secrets.DX_STAGING_TOKEN }}
        run: |
          export PATH="$PATH:$HOME/.local/bin"

          # set up DNAnexus staging environment
          dx login --noprojects --staging --token $AUTH_TOKEN
          PROJECT=dxCompiler_playground
          dx select $PROJECT

          # run tests
          cd ${GITHUB_WORKSPACE}
          FOLDER=/builds/test_gha_dxcompiler_$(date +%s)_$RANDOM
          echo dx mkdir $FOLDER
          echo python3 scripts/run_tests.py --test L --folder $FOLDER --project $PROJECT
          echo dx rmdir $FOLDER

      - name: Update release notes and application.conf files
        id: update-release
        run: |
          export PATH="$PATH:$HOME/.local/bin"
          export EXTRACT_RELEASE_NOTES=$(sed -n '/# 2.2.0/,/##/p' RELEASE_NOTES.md |  sed '1d; $d')
          echo "--- start EXTRACT_RELEASE_NOTES"
          echo "${EXTRACT_RELEASE_NOTES}"
          echo "--- end EXTRACT_RELEASE_NOTES"
          echo ::set-output name=release-notes::echo "${EXTRACT_RELEASE_NOTES}"
          CONF_FILES=(
              ./executorWdl/src/main/resources/application.conf
              ./core/src/main/resources/application.conf
              ./executorCwl/src/main/resources/application.conf
              ./compiler/src/main/resources/application.conf
              ./executorCommon/src/main/resources/application.conf
          )
          for i in ${CONF_FILES[@]}; do
              sed -i 's/version.*$/version = "${{ github.event.inputs.release-version }}"/' $i
          done

      - name: Commit changes to release notes and application.conf files
        uses: EndBug/add-and-commit@v7
        with:
          message: 'Release ${{ github.event.inputs.release-version }}'
          add: '[
              "./executorWdl/src/main/resources/application.conf", 
              "./core/src/main/resources/application.conf",
              "./executorCwl/src/main/resources/application.conf",
              "./compiler/src/main/resources/application.conf",
              "./executorCommon/src/main/resources/application.conf"
          ]'
          push: false
          tag: ${{ github.event.inputs.release-version }}

      - name: Run the release script
        env:
          STG_TOKEN: ${{ secrets.DX_STAGING_TOKEN }}
          PROD_TOKEN: ${{ secrets.DX_STAGING_TOKEN }}
          DOCKERHUB_TOKEN: ${{ secrets.DX_STAGING_TOKEN }}
        run: |
          export PATH="$PATH:$HOME/.local/bin"
          echo ./scripts/build_all_releases.sh \
              --staging-token $STG_TOKEN \
              --production-token $PROD_TOKEN \
              --docker-user commandlinegirl \
              --docker-password $DOCKERHUB_TOKEN

      - name: Create release entry
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.release-version }}
          release_name: dxCompiler ${{ github.event.inputs.release-version }}
          body: ${{ steps.update-release.outputs.release-notes }}
          draft: true
          prerelease: false

      - name: Upload release asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the "Create release entry" step above, referencing it's ID to get its outputs object, 
          # which include a `upload_url`. See this blog post for more info: 
          # https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          upload_url: ${{ steps.create-release.outputs.upload_url }} 
          # asset_path: ./dxCompiler${{ github.event.inputs.release-version }}.jar
          asset_path: ./executorWdl/src/main/resources/application.conf
          asset_name: dxCompiler-${{ github.event.inputs.release-version }}.jar
          # asset_content_type: application/jar
          asset_content_type: text/html

      - name: Push main and tag to origin if successful
        if: ${{ success() }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export PATH="$PATH:$HOME/.local/bin"
          git push origin ${{ github.ref }}

      # - name: Push tag to origin if successful
      #   if: ${{ success() }}
      #   uses: ad-m/github-push-action@master
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     branch: ${{ github.event.inputs.release-version }}

      - name: Rollback release if unsuccessfull
        if: ${{ cancelled() || failure() || success() }}
        uses: author/action-rollback@stable
        with:
          release_id: create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

