name: dxCompiler Release (Staging and Prod)
on:
  workflow_dispatch:
    inputs:
      release-version:
        description: 'Release version'
        required: true

jobs:
  run-release:
    name: dxCompiler Release (Staging and Prod)
    runs-on: ubuntu-18.04
    steps:
      - name: Git checkout
        uses: actions/checkout@v2

      - name: Install java
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Install dxpy and other dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https wget git openssh-server tree python3 python3-pip python3-venv
          pip3 install setuptools wheel
          pip3 install termcolor
          pip3 install dxpy

      - name: Run tests
        env:
          AUTH_TOKEN: ${{ secrets.DX_STAGING_TOKEN }}
        run: |
          export PATH="$PATH:$HOME/.local/bin"

          # set up DNAnexus staging environment
          dx login --noprojects --staging --token $AUTH_TOKEN
          PROJECT=dxCompiler_playground
          dx select $PROJECT

          # run tests
          cd ${GITHUB_WORKSPACE}
          FOLDER=/builds/test_gha_dxcompiler_$(date +%s)_$RANDOM
          echo dx mkdir $FOLDER
          echo python3 scripts/run_tests.py --test L --folder $FOLDER --project $PROJECT
          echo dx rmdir $FOLDER

      - name: Commit changes to release notes and application.conf files
        uses: EndBug/add-and-commit@v7
        with:
          cwd: './dxCompiler'
          message: 'Release ${{ github.event.inputs.release-version }}'
          add: '["./executorWdl/src/main/resources/application.conf", "./core/src/main/resources/application.conf"]'

      - name: Run the release script
        env:
          STG_TOKEN: ${{ secrets.DX_STAGING_TOKEN }}
          PROD_TOKEN: ${{ secrets.DX_STAGING_TOKEN }}
          DOCKERHUB_TOKEN: ${{ secrets.DX_STAGING_TOKEN }}
        run: |
          export PATH="$PATH:$HOME/.local/bin"
          
          # Update application.conf files in 5 packages
          
          # Update RELEASE_NOTES
          
          echo ./scripts/build_all_releases.sh \
              --staging-token $STG_TOKEN \
              --production-token $PROD_TOKEN \
              --docker-user ROBOT_ACCOUNT \
              --docker-password $DOCKERHUB_TOKEN

#       - name: Create release entry
#         id: create-release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ github.event.inputs.release-version }}
#           release_name: dxCompiler ${{ github.event.inputs.release-version }}
#           draft: false
#           prerelease: false

#       - name: Upload release asset
#         id: upload-release-asset 
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, 
#           # which include a `upload_url`. See this blog post for more info: 
#           # https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
#           upload_url: ${{ steps.create-release.outputs.upload_url }} 
#           asset_path: ./dxCompiler${{ release-version }}.jar
#           asset_name: dxCompiler${{ release-version }}.jar
#           asset_content_type: application/jar
